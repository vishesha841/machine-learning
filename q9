import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
X = df['text']
y = df['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
tfidf = TfidfVectorizer(stop_words='english', max_features=5000)

# Start with a Linear SVM
linear_svm = make_pipeline(tfidf, SVC(kernel='linear', C=1))

# Train the linear SVM
linear_svm.fit(X_train, y_train)

# Make predictions
y_pred = linear_svm.predict(X_test)
# Start with a Linear SVM
linear_svm = make_pipeline(tfidf, SVC(kernel='linear', C=1))

# Train the linear SVM
linear_svm.fit(X_train, y_train)

# Make predictions
y_pred = linear_svm.predict(X_test)
print("Linear SVM Classification Report:")
print(classification_report(y_test, y_pred))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
non_linear_svm = make_pipeline(tfidf, SVC(kernel='rbf', C=1, gamma='scale'))
non_linear_svm.fit(X_train, y_train)
y_pred_non_linear = non_linear_svm.predict(X_test)
# Evaluate the performance
print("\nNon-Linear SVM Classification Report:")
print(classification_report(y_test, y_pred_non_linear))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_non_linear))
from sklearn.model_selection import GridSearchCV

# Define the parameter grid for Linear SVM
linear_param_grid = {'svc__C': [0.1, 1, 10]}

# Grid search for linear SVM
linear_search = GridSearchCV(linear_svm, param_grid=linear_param_grid, cv=5)
linear_search.fit(X_train, y_train)

print("Best Parameters for Linear SVM:", linear_search.best_params_)
