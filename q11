import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler

np.random.seed(42)
days = np.arange(1, 366)  # Day of the year (1 to 365)
temperature = 10 * np.sin(2 * np.pi * days / 365) + 20 + np.random.randn(365)  # Seasonal pattern with noise

df = pd.DataFrame({'Day_of_Year': days, 'Temperature': temperature})
df['sin_day'] = np.sin(2 * np.pi * df['Day_of_Year'] / 365)
df['cos_day'] = np.cos(2 * np.pi * df['Day_of_Year'] / 365)

# Features and target variable
X = df[['sin_day', 'cos_day']]  # Using sin and cos features to capture seasonality
y = df['Temperature']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse:.2f}")
plt.figure(figsize=(10, 6))
plt.plot(df['Day_of_Year'], df['Temperature'], label='True Temperatures', color='blue', alpha=0.6)
plt.scatter(X_test['sin_day'], y_test, color='red', label='Test Data', alpha=0.6)
plt.plot(X_test['sin_day'], y_pred, label='Predicted Temperatures', color='green', linestyle='--')
plt.title('Seasonal Temperature Prediction with Sinusoidal Features')
plt.xlabel('Day of Year')
plt.ylabel('Temperature')
plt.legend()
plt.grid(True)
plt.show()
